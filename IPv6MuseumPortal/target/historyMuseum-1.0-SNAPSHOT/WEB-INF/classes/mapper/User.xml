<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 定义对应的名空间,避免命名冲突。事实上可以随便定义，例如abc,只要在应用中不要出现冲突即可.namespace目前有2种定义方式， 1、使用ibatis的定义方法，这里是实体类的全名；2、使用Mapper接口的全名，新用法 -->
<mapper namespace="museum.dao.UserDao">
    <!-- CRUD操作对应的都有都应的标签，insert update delete select -->
    <select id="find" parameterType="String" resultType="museum.entity.User">
		SELECT User_Id,User_name,User_password,User_root,User_image
		FROM user where User_Id=#{userId}
	</select>

    <insert id="save" parameterType="User">
        INSERT INTO
        user(User_Id,User_name,User_password,User_root,User_image)
        VALUES(#{userId},#{userName},#{userPassword},#{userRoot},#{userImage})
    </insert>

    <select id="findAll" resultType="museum.entity.User">
		SELECT User_Id,User_name,User_password,User_root,User_image
		FROM user
	</select>

    <select id="getRowCount" resultType="int">
		SELECT count(*) FROM user
	</select>

    <select id="findPageData" resultType="museum.entity.User">
		SELECT User_Id,User_name,User_password,User_root,User_image
		FROM user limit #{startLine},#{size}
	</select>

    <select id="findBy" resultType="museum.entity.User">
        SELECT User_Id,User_name,User_password,User_root,User_image
        FROM user
        where
        <if test="userId != null">
            User_Id = #{userId}
        </if>
        <if test="content != null">
            and User_name = #{user_name}
        </if>

    </select>


    <update id="update" parameterType="User">
        UPDATE user
            SET
              User_name=#{user.userName},
              User_root=#{user.userRoot},
              User_image=#{user.userImage}
         WHERE User_Id=#{user.userId}
    </update>

    <delete id="deleteUser">
        delete from user where User_Id = #{userId}
    </delete>



</mapper>